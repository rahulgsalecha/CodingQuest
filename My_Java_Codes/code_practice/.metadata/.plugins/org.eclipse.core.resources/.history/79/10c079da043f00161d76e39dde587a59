package datastructures;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Stack<Item> implements Iterable<Item> {

	private Node<Item> first;	//Top of the stack
	private int N;				//Size of the stack
	
	//Helper linked list class
	private static class Node<Item>{
		private Item item;
		private Node<Item> next;
	}
	
	public Stack(){
		first = null;
		N = 0;
	}
	
	public boolean isEmpty(){
		return first == null;

	}
	
	public int size(){
		return N;
	}
	
	public void push(Item item){
		Node<Item> oldfirst = first;
		first.item = item;
		first.next = oldfirst;
		N++;
	}
	
	public Item pop(){
		if(isEmpty()) throw new NoSuchElementException("Stack underflow");
		Item item = first.item;
		first = first.next;
		N--;
		return item;
	}
	
	public Item peek(){
		if(isEmpty()) throw new NoSuchElementException("Stack underflow");
		return first.item;
	}
	
	public String toString(){
		StringBuilder s = new StringBuilder();
		for(Item item:this){
			s.append(item+"");
		}
		return s.toString();
	}
	

	public Iterator<Item> iterator() {
		// TODO Auto-generated method stub
		return new ListIterator<Item>(first);
	}
	
	public class ListIterator<Item> implements Iterator<Item>{
		private Node<Item> current;
		
		public ListIterator(Node<Item> first){
			current=first;
		}
		
		public boolean hasNext() {
			return current!=null;
		}

		public Item next() {
			if(!hasNext()) throw new NoSuchElementException();
			Item item = current.item;
			current = current.next;
			return item;
		}
		
		public void remove() {
            throw new UnsupportedOperationException();
        }
		
	}
	
	public static void main(String[] args) {
        Stack<String> s = new Stack<String>();
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String str;
        while ((str = in.readLine()) != null && str.length() != 0)
            if (!str.equals("-")) s.push(str);
            else if (!s.isEmpty()) System.out.println(s.pop() + " ");
        }
		//StdOut.println('(' + s.size() + ' left on stack)');
		
    }

	
}
